name: CI/CD

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch or branches starting with "RRTB-"
  push:
    branches: [ "main", "RRTB-*" ]
  pull_request:
    branches: [ "main" ]
    types:
      - opened
      - synchronize
      - reopened

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build-and-deploy"
  build-and-deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment: production

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-outs your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create GitHub Actions Role
        run: |
          # Create initial role with trust policy
          if ! aws iam get-role --role-name github-actions-role 2>/dev/null; then
            aws iam create-role \
              --role-name github-actions-role \
              --assume-role-policy-document file://.github/setup/github-actions-trust.json
          fi
          
          # Create or update the policy
          POLICY_ARN=$(aws iam list-policies --query 'Policies[?PolicyName==`GitHubActionsPolicy`].Arn' --output text)
          if [ -z "$POLICY_ARN" ]; then
            POLICY_ARN=$(aws iam create-policy \
              --policy-name GitHubActionsPolicy \
              --policy-document file://.github/setup/github-actions-policy.json \
              --query 'Policy.Arn' --output text)
          else
            aws iam create-policy-version \
              --policy-arn $POLICY_ARN \
              --policy-document file://.github/setup/github-actions-policy.json \
              --set-as-default
          fi
          
          # Attach the policy to the role
          aws iam attach-role-policy \
            --role-name github-actions-role \
            --policy-arn $POLICY_ARN

      - name: Bootstrap CDK
        run: |
          cd rrtb_infra
          npm install -g aws-cdk
          cdk bootstrap aws://${{ secrets.AWS_ACCOUNT_ID }}/${{ secrets.AWS_REGION }}

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Deploy with CDK
        run: |
          cd rrtb_infra
          cdk deploy --require-approval never