name: CI/CD

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch or branches starting with "RRTB-"
  push:
    branches: [ "main", "RRTB-*" ]
  pull_request:
    branches: [ "main" ]
    types:
      - opened
      - synchronize
      - reopened

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build-and-deploy"
  build-and-deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment: production
    permissions:
      id-token: write
      contents: read

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-outs your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Configure AWS credentials
        if: ${{ !env.ACT }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          mask-aws-account-id: true

      - name: Verify AWS Identity
        if: ${{ !env.ACT }}
        run: |
          echo "Current AWS identity:"
          aws sts get-caller-identity
          echo "Current user policies:"
          aws iam list-attached-user-policies --user-name github-actions

      - name: Create and Attach GitHub Actions Policy
        if: ${{ !env.ACT }}
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        run: |
          # Create or update the policy
          POLICY_ARN=$(aws iam list-policies --query 'Policies[?PolicyName==`GitHubActionsPolicy`].Arn' --output text)
          echo "Policy ARN: $POLICY_ARN"
          if [ -z "$POLICY_ARN" ]; then
            echo "Policy does not exist, creating it"
            POLICY_ARN=$(aws iam create-policy \
              --policy-name GitHubActionsPolicy \
              --policy-document file://.github/setup/github-actions-policy.json \
              --query 'Policy.Arn' --output text)
            echo "Created policy with ARN: $POLICY_ARN"
          else
            echo "Policy already exists, checking if update needed"
            # Get current default version
            DEFAULT_VERSION=$(aws iam get-policy --policy-arn $POLICY_ARN --query 'Policy.DefaultVersionId' --output text)
            echo "Current default version: $DEFAULT_VERSION"
            
            # Get current policy document
            CURRENT_POLICY=$(aws iam get-policy-version \
              --policy-arn $POLICY_ARN \
              --version-id $DEFAULT_VERSION \
              --query 'PolicyVersion.Document' --output json)
            
            # Get new policy document
            NEW_POLICY=$(cat .github/setup/github-actions-policy.json)
            
            # Compare policies (normalize JSON formatting)
            if [ "$(echo $CURRENT_POLICY | jq -cS .)" != "$(echo $NEW_POLICY | jq -cS .)" ]; then
              echo "Policy content has changed, creating new version"
              # Get list of policy versions
              VERSIONS=$(aws iam list-policy-versions --policy-arn $POLICY_ARN --query 'Versions[?!IsDefaultVersion].[VersionId]' --output text)
              
              # If we have any non-default versions, delete the oldest one
              if [ ! -z "$VERSIONS" ]; then
                OLDEST_VERSION=$(echo "$VERSIONS" | head -n 1)
                echo "Deleting oldest version: $OLDEST_VERSION"
                aws iam delete-policy-version --policy-arn $POLICY_ARN --version-id $OLDEST_VERSION
              fi
              
              # Create new policy version
              aws iam create-policy-version \
                --policy-arn $POLICY_ARN \
                --policy-document file://.github/setup/github-actions-policy.json \
                --set-as-default
              echo "Created new policy version"
            else
              echo "Policy content has not changed, skipping update"
            fi
          fi
          
          # Attach the policy to the user
          echo "Attaching policy to user"
          aws iam attach-user-policy \
            --user-name github-actions \
            --policy-arn $POLICY_ARN

          echo "Current user policies after update:"
          aws iam list-attached-user-policies --user-name github-actions

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Install CDK
        run: |
          npm install -g aws-cdk
          cdk --version

      - name: Bootstrap CDK
        if: ${{ !env.ACT }}
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        run: |
          cd rrtb_infra
          echo "Checking AWS account and region..."
          aws sts get-caller-identity
          echo "AWS Region: ${{ secrets.AWS_REGION }}"
          
          echo "Running CDK bootstrap..."
          cdk bootstrap \
            --verbose \
            --cloudformation-execution-policies arn:aws:iam::aws:policy/AdministratorAccess \
            --trust ${{ secrets.AWS_ACCOUNT_ID }} \
            --force \
            aws://${{ secrets.AWS_ACCOUNT_ID }}/${{ secrets.AWS_REGION }}
          
          echo "Verifying bootstrap bucket..."
          BUCKET_NAME="cdk-rrtb-assets-${{ secrets.AWS_ACCOUNT_ID }}-${{ secrets.AWS_REGION }}"
          if aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
            echo "✅ Bootstrap bucket $BUCKET_NAME exists"
            aws s3api list-objects --bucket "$BUCKET_NAME" --max-items 5
          else
            echo "❌ Bootstrap bucket $BUCKET_NAME does not exist"
            echo "Available S3 buckets:"
            aws s3api list-buckets --query 'Buckets[].Name'
            exit 1
          fi

      - name: Deploy with CDK
        if: ${{ !env.ACT }}
        run: |
          cd rrtb_infra
          cdk deploy --require-approval never --verbose