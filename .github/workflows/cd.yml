name: CD

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches:
      - master

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

jobs:
  prepare-deployment:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}
      
      - name: Display structure of downloaded files
        run: ls -R
        
      - name: Upload artifacts for next jobs
        uses: actions/upload-artifact@v4
        with:
          name: deployment-artifacts
          path: |
            **/target/*.jar
            rrtb_infra/cdk.out
            rrtb_infra/package.json
            rrtb_infra/package-lock.json

  update-templates:
    needs: deploy-prod
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
          ref: ${{ github.event.workflow_run.head_branch }}
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Check for template changes
        id: check_changes
        env:
          TEMPLATES_BUCKET_FROM_SECRET: ${{ secrets.TEMPLATES_BUCKET }}
        run: |
          echo "--- Starting Basic AWS CLI Check ---"
          echo "Attempting to run: aws sts get-caller-identity"
          aws sts get-caller-identity
          AWS_EXIT_CODE=$?
          echo "aws sts get-caller-identity Exit Code: $AWS_EXIT_CODE"
          
          if [ $AWS_EXIT_CODE -ne 0 ]; then
            echo "::error::Basic AWS CLI check failed!"
            exit $AWS_EXIT_CODE
          fi
          
          echo "--- End Basic AWS CLI Check ---"

          # --- Placeholder for original logic (commented out/removed for now) --- 
          # echo "Skipping template sync logic for basic AWS CLI test."
          
          # --- Dummy outputs to prevent downstream failures --- 
          echo "Final list of files needing upload: ''"
          echo "files_to_upload=" >> $GITHUB_OUTPUT
          echo "needs_upload=false" >> $GITHUB_OUTPUT

      - name: Upload changed templates to S3
        # Use the boolean flag for the condition
        if: steps.check_changes.outputs.needs_upload == 'true'
        run: |
          echo "Uploading templates with differing checksums or not found in S3..."
          # Iterate through the space-separated list from the previous step's output
          for template in ${{ steps.check_changes.outputs.files_to_upload }}; do
            echo "Uploading $template to S3..."
            # Use the same bucket secret and ensure path matches
            aws s3 cp "$template" "s3://$TEMPLATES_BUCKET_FROM_SECRET/$template"
          done
          echo "Upload complete."

  deploy-dev:
    needs: prepare-deployment
    runs-on: ubuntu-latest
    environment: development
    steps:
      - uses: actions/checkout@v4
      
      - name: Download deployment artifacts  
        uses: actions/download-artifact@v4
        with:
          name: deployment-artifacts
          path: .
          
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install CDK Dependencies
        run: |
          cd rrtb_infra
          npm install
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Update Policy Files
        run: |
          cd rrtb_infra
          sed -i "s/\${AWS_ACCOUNT_ID}/${{ env.AWS_ACCOUNT_ID }}/g" github-actions-policy.json
          sed -i "s/\${TEMPLATES_BUCKET}/${{ secrets.TEMPLATES_BUCKET }}/g" github-actions-policy.json
          
      - name: Bootstrap CDK
        run: |
          cd rrtb_infra
          npx cdk bootstrap
          
      - name: Deploy Application
        run: |
          cd rrtb_infra
          npx cdk deploy --require-approval never

  deploy-test:
    needs: deploy-dev
    runs-on: ubuntu-latest
    environment: test
    steps:
      - uses: actions/checkout@v4
      
      - name: Download deployment artifacts  
        uses: actions/download-artifact@v4
        with:
          name: deployment-artifacts
          path: .
          
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install CDK Dependencies
        run: |
          cd rrtb_infra
          npm install
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Update Policy Files
        run: |
          cd rrtb_infra
          sed -i "s/\${AWS_ACCOUNT_ID}/${{ env.AWS_ACCOUNT_ID }}/g" github-actions-policy.json
          
      - name: Bootstrap CDK
        run: |
          cd rrtb_infra
          npx cdk bootstrap
          
      - name: Deploy Application
        run: |
          cd rrtb_infra
          npx cdk deploy --require-approval never

  deploy-prod:
    needs: deploy-test
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      - name: Download deployment artifacts  
        uses: actions/download-artifact@v4
        with:
          name: deployment-artifacts
          path: .
          
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install CDK Dependencies
        run: |
          cd rrtb_infra
          npm install
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Update Policy Files
        run: |
          cd rrtb_infra
          sed -i "s/\${AWS_ACCOUNT_ID}/${{ env.AWS_ACCOUNT_ID }}/g" github-actions-policy.json
          
      - name: Bootstrap CDK
        run: |
          cd rrtb_infra
          npx cdk bootstrap
          
      - name: Deploy Application
        run: |
          cd rrtb_infra
          npx cdk deploy --require-approval never 