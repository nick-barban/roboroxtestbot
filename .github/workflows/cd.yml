name: CD

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches:
      - master

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

jobs:
  prepare-deployment:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}
      
      - name: Display structure of downloaded files
        run: ls -R
        
      - name: Upload artifacts for next jobs
        uses: actions/upload-artifact@v4
        with:
          name: deployment-artifacts
          path: |
            **/target/*.jar
            rrtb_infra/cdk.out
            rrtb_infra/package.json
            rrtb_infra/package-lock.json

  update-templates:
    needs: prepare-deployment
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Check for template changes
        id: check_changes
        run: |
          CHANGED_TEMPLATES=$(git diff --name-only ${{ github.event.workflow_run.head_commit.id }} ${{ github.event.workflow_run.base_commit.id }} | grep '^templates/')
          if [ -n "$CHANGED_TEMPLATES" ]; then
            echo "changed_templates=true" >> $GITHUB_OUTPUT
            echo "Found changed templates:"
            echo "$CHANGED_TEMPLATES"
          else
            echo "changed_templates=false" >> $GITHUB_OUTPUT
            echo "No template changes found"
          fi
      
      - name: Upload changed templates to S3
        if: steps.check_changes.outputs.changed_templates == 'true'
        run: |
          CHANGED_TEMPLATES=$(git diff --name-only ${{ github.event.workflow_run.head_commit.id }} ${{ github.event.workflow_run.base_commit.id }} | grep '^templates/')
          for template in $CHANGED_TEMPLATES; do
            echo "Uploading $template to S3..."
            aws s3 cp $template s3://${{ secrets.TEMPLATES_BUCKET }}/$template
          done

  deploy-dev:
    needs: [prepare-deployment, update-templates]
    runs-on: ubuntu-latest
    environment: development
    steps:
      - uses: actions/checkout@v4
      
      - name: Download deployment artifacts  
        uses: actions/download-artifact@v4
        with:
          name: deployment-artifacts
          path: .
          
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install CDK Dependencies
        run: |
          cd rrtb_infra
          npm install
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Update Policy Files
        run: |
          cd rrtb_infra
          sed -i "s/\${AWS_ACCOUNT_ID}/${{ env.AWS_ACCOUNT_ID }}/g" github-actions-policy.json
          
      - name: Bootstrap CDK
        run: |
          cd rrtb_infra
          npx cdk bootstrap
          
      - name: Deploy Application
        run: |
          cd rrtb_infra
          npx cdk deploy --require-approval never

  deploy-test:
    needs: [deploy-dev, update-templates]
    runs-on: ubuntu-latest
    environment: test
    steps:
      - uses: actions/checkout@v4
      
      - name: Download deployment artifacts  
        uses: actions/download-artifact@v4
        with:
          name: deployment-artifacts
          path: .
          
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install CDK Dependencies
        run: |
          cd rrtb_infra
          npm install
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Update Policy Files
        run: |
          cd rrtb_infra
          sed -i "s/\${AWS_ACCOUNT_ID}/${{ env.AWS_ACCOUNT_ID }}/g" github-actions-policy.json
          
      - name: Bootstrap CDK
        run: |
          cd rrtb_infra
          npx cdk bootstrap
          
      - name: Deploy Application
        run: |
          cd rrtb_infra
          npx cdk deploy --require-approval never

  deploy-prod:
    needs: [deploy-test, update-templates]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      - name: Download deployment artifacts  
        uses: actions/download-artifact@v4
        with:
          name: deployment-artifacts
          path: .
          
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install CDK Dependencies
        run: |
          cd rrtb_infra
          npm install
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Update Policy Files
        run: |
          cd rrtb_infra
          sed -i "s/\${AWS_ACCOUNT_ID}/${{ env.AWS_ACCOUNT_ID }}/g" github-actions-policy.json
          
      - name: Bootstrap CDK
        run: |
          cd rrtb_infra
          npx cdk bootstrap
          
      - name: Deploy Application
        run: |
          cd rrtb_infra
          npx cdk deploy --require-approval never 